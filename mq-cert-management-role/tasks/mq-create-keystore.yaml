- name: Check if the keystore exists
  stat:
    path: "{{ keypath }}"
  register: keyfile_exists

- name: Let's create the keystore if it doesn't already exist and configure MQ for it
  block:
  - name: Create the keystore
    become_user: mqm
    shell: "{{ MQM_BIN_PATH }}/runmqakm -keydb -create \
          -db {{ keypath }} \
          -pw {{ keystore_passwd }} \
          -stash" 
    register: keystore_created

  - name: Populate the keystore with Entrust CA
    become_user: mqm
    shell: "{{ MQM_BIN_PATH }}/runmqckm -cert -populate \
          -db {{ keypath }} \
          -pw {{ keystore_passwd }} \
          -label entrust"
    when: keystore_created.rc == 0

  - name: Populate the keystore with Thawte CA
    become_user: mqm
    shell: "{{ MQM_BIN_PATH }}/runmqckm -cert -populate \
          -db {{ keypath }} \
          -pw {{ keystore_passwd }} \
          -label thawte"
    when: keystore_created.rc == 0

  - name: Populate the keystore with Verisign CA
    become_user: mqm
    shell: "{{ MQM_BIN_PATH }}/runmqckm -cert -populate \
          -db {{ keypath }} \
          -pw {{ keystore_passwd }} \
          -label verisign"
    when: keystore_created.rc == 0

  - name: Let's put the LetsEncrypt CA out to populate into our keystore
    copy:
      src: files/isrgrootx1.pem
      dest: /tmp/isrgrootx1.pem
      owner: mqm
      group: mqm

  - name: Add the letsencrypt CA pem to our keystore
    become_user: mqm
    shell: "{{ MQM_BIN_PATH }}/runmqakm -cert -add \
          -db {{ keypath }} \
          -pw {{ keystore_passwd }} \
          -file /tmp/isrgrootx1.pem \
          -label 'Lets Encrypt Certification Authority'"
    when: keystore_created.rc == 0

  - name: Validate the cert was added successfully
    become_user: mqm
    shell: "{{ MQM_BIN_PATH }}/runmqakm -cert -validate \
          -db {{ keypath }} \
          -pw {{ keystore_passwd }} \
          -label 'Lets Encrypt Certification Authority'"
    register: cert_validated
    when: keystore_created.rc == 0

  - name: Fix our keypath name so we can update our queuemanager
    set_fact:
      keypath_qmgr: "{{ keypath|regex_replace('.kdb') }}"

  - name: Update our queue manager to use this new keystore
    become_user: mqm
    shell: "echo \"ALTER QMGR SSLKEYR('{{ keypath_qmgr }}')\" | {{ MQM_BIN_PATH }}/runmqsc {{ queuemgr }} -e"
    register: qmgr_updated

  - name: Template the email
    template:
      src: templates/keystore_created.html.j2
      dest: "/tmp/keystore_created.html"

  - name: Collect the output of our email template
    shell: "cat /tmp/keystore_created.html"
    register: keystore_added_body

  - set_fact:
      subject: "Keystore created on {{ inventory_hostname }}"
      body: "{{ keystore_added_body.stdout }}"

  - name: Clean up the template
    file:
      path: "/tmp/keystore_created.html"
      state: absent

  - name: Clean up the letsencrypt CA file 
    file:
      path: "/tmp/isrgrootx1.pem"
      state: absent

  - name: Send an email 
    become: false 
    mail:
      host: "{{ smtp_info.host }}"
      port: "{{ smtp_info.port }}"
      username: "{{ smtp_info.user }}"
      password: "{{ smtp_info.pass }}"
      to: "{{ email_address }}"
      subtype: html
      subject: "{{ subject }}"
      body: "{{ body }}"
      from: "{{ smtp_info.from }}"
    delegate_to: localhost

  - name: Update the github issue to document what we did for this user
    become: false 
    uri:
      url: "{{ github_repo }}/issues/{{ github_issue }}/comments"
      method: POST
      headers:
        Authorization: "Bearer {{ github_access_token }}"
      validate_certs: false
      body_format: json
      body:
        body: |-
          ** Created Keystore **

          The following keystore has been created and added to the queue manager:

          - Host: `{{ inventory_hostname }}`
          - KeyStore: `{{ keypath }}`
          - Queue Manager: `{{ queuemgr }}`

      status_code: [200,201]
    delegate_to: localhost
    when: keystore_created.rc == 0 
  when: 
    - "'primary' in mq_role"
    - not keyfile_exists.stat.exists